---
layout: layouts/base.njk
title: CSS Grid Generator
columns: 12
grid_breakpoint_tablet: 48rem
grid_breakpoint_desktop: 60rem
grid_columns_mobile: 1
grid_column_gap_mobile: var(--column-gap-mobile, 0.75rem)
grid_row_gap_mobile: var(--row-gap-mobile, 0.5lh)
grid_columns_tablet: 2
grid_column_gap_tablet: var(--column-gap-tablet, 1.125rem)
grid_row_gap_tablet: var(--row-gap-tablet, 0.75lh)
grid_columns_desktop: 12
grid_columns_desktop_factors: [2, 3, 4, 6, 12]
grid_column_gap_desktop: var(--column-gap-desktop, 1.5rem)
grid_row_gap_desktop: var(--row-gap-desktop, 1lh)
use_prism: true
---

<main>
  <h1>CSS Grid Generator</h1>

  <section class="gs-input">
    <h2>Grid configuration</h2>
    {% include "grid-input.njk" %}
  </section>

  <section class="gs-output">
    <h2>Generated CSS</h2>
    <a download href target="_blank">Download this file</a>
    {% include "grid-output.njk" %}
  </section>

  <section class="gs-demo">
    <h2>Grid demo</h2>
    {% include "grid-demo.njk" %}
  </section>
</main>

<script src="{{ '/assets/nunjucks.min.js'|url }}"></script>
<script src="{{ '/assets/standalone.js'|url }}"></script>
<script src="{{ '/assets/postcss.js'|url }}"></script>
<script src="{{ '/assets/prism.js'|url }}" data-manual></script>
<script src="{{ '/assets/prism-line-numbers.min.js'|url }}"></script>
<script>window.pathPrefix = "{{ '/'|url }}";</script>
<script>
  /**
   *
   */
  class FormState extends FormData {
    /**
     *
     */
    constructor(form, submitter, dependentFields = {}) {
      super();
      this.form = form;
      this.dependentFields = dependentFields;

      this.#init();

      this.form.addEventListener("change", this.updateData);
    }

    /**
     *
     */
    #init = () => {
      Array.from(this.form.elements).forEach((el) => {
        this.updateData(el, true);
      });
    };

    /**
     *
     */
    dump = () => Object.fromEntries(this);

    /**
     *
     */
    updateData = (target, init = false) => {
      const field = target instanceof Event ? target.target : target;
      const { name, value } = field;

      // Re: dependentFields. These never satisfy the conditions to be able to
      // use this.set(name, value). We'd expect them to be hidden in most cases
      // anyhow.
      //
      // We don't worry about running this.get(field) for the callback arg
      // because we don't do dependentFields computation on init, and after
      // that, the object only gets updated one field at a time (i.e. whatever
      // value 'field' has is the right one, because IT did not change).
      if (name) {
        if (this.dependentFields.hasOwnProperty(name) && !init) {
          const [callback, field] = this.dependentFields[name];
          this.set(name, callback(this.get(field)));
        } else {
          this.set(name, value);
        }
      }
    };
  }

  (async function() {
    /**
     * Performs a factorization of the incoming columns value using its root.
     *
     * @param {number} columns
     *   The number of columns the grid system will use.
     * @param {number[]}
     *   The list of factors sorted ASC.
     */
    function factorizeColumnCount(columns) {
      const factors = [];
      const n = parseInt(columns, 10);

      for (let i = 1; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
          factors.push(i);

          // Only add n / 1 to factors if it's not a perfect square.
          if (i !== n / i) {
            factors.push(n / i);
          }
        }
      }

      // We don't care that much about 1 as a factor for CSS purposes.
      return factors.sort((a, b) => a - b).slice(1);
    }

    /**
     * Generates CSS for demo, download.
     */
    async function generateCss() {
      try {
        const unformattedCss = nj.render("grid-css.njk.html", data);

        css = await prettier.format(unformattedCss, {
          parser: "css",
          plugins: prettierPlugins,
        });
      } catch (error) {
        console.error('Error generating css:', error);
      }
    }

    /**
     * Generates filename and url for css download link.
     *
     * @param {string} css
     *   The generated css.
     */
    function generateDownload(css) {
      const blob = new Blob([css], { type: "text/css" });
      const filename = `gs-${form.columnsdesktop.value}.css`;

      if (downloadUrl) {
        URL.revokeObjectURL(downloadUrl);
      }

      downloadUrl = URL.createObjectURL(blob);
      downloadLink.setAttribute("download", filename);
      downloadLink.setAttribute("href", downloadUrl);
    }

    /**
     * Generates HTML for demo.
     */
    async function generateHtml() {
      try {
        html = nj.render("grid-html.njk.html", data);
      } catch (error) {
        console.error('Template rendering error:', error);
      }
    }

    /**
     * Handles form submit.
     *
     * @param {Event} event
     *   The event passed in by the listener.
     */
    async function handleFormControlChange(event) {
      event.preventDefault();
      renderOutput();
    }

    /**
     * Renders output.
     */
    async function renderOutput() {
      data = formState.dump();
      await generateCss();
      generateHtml();
      output.innerHTML = css;
      demoStyles.textContent = css;
      demo.innerHTML = html;
      generateDownload(css);
      Prism.highlightElement(output);
    }

    const form = document.querySelector(".gs-form");
    const demo = document.querySelector(".gs-demo > .gs-html");
    const demoStyles = document.querySelector(".gs-demo-styles");
    const output = document.querySelector(".gs-output > pre > code");
    const downloadLink = document.querySelector(".gs-output a[download]");
    const nj = new nunjucks.Environment(
      new nunjucks.WebLoader(`${pathPrefix}assets/templates`),
      {
        useCache: true,
      }
    );
    let downloadUrl;
    let data;
    let css;
    let html;
    const formState = new FormState(
      form,
      undefined,
      {
        grid_columns_desktop_factors: [
          factorizeColumnCount,
          'grid_columns_desktop'
        ]
      },
    );

    if (
      !form
      || !demo
      || !demoStyles
      || !output
      || !downloadLink
      || !nj
      || !Prism
    ) {
      return;
    }

    nj.opts.autoescape = false;
    await renderOutput();
    form.addEventListener("change", handleFormControlChange);
  })();
</script>
